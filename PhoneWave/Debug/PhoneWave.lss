
LED Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800060  00800060  000004c2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000333  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000147  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000231  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000008c  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000019d  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000f4  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	59 c1       	rjmp	.+690    	; 0x2b6 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	d3 c1       	rjmp	.+934    	; 0x3ba <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 38       	cpi	r26, 0x82	; 130
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	f2 c1       	rjmp	.+996    	; 0x42a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
uint8_t tzaehler = 0;
int main(void)
{
	//welche Zahl welche leuchtenden Segmente
	//			= 0b00gfedcb
	segcodeB[0] = 0b00011111;
  48:	8f e1       	ldi	r24, 0x1F	; 31
  4a:	80 93 77 00 	sts	0x0077, r24
	segcodeB[1] = 0b00000011;
  4e:	93 e0       	ldi	r25, 0x03	; 3
  50:	90 93 78 00 	sts	0x0078, r25
	segcodeB[2] = 0b00101101;
  54:	2d e2       	ldi	r18, 0x2D	; 45
  56:	20 93 79 00 	sts	0x0079, r18
	segcodeB[3] = 0b00100111;
  5a:	27 e2       	ldi	r18, 0x27	; 39
  5c:	20 93 7a 00 	sts	0x007A, r18
	segcodeB[4] = 0b00110011;
  60:	23 e3       	ldi	r18, 0x33	; 51
  62:	20 93 7b 00 	sts	0x007B, r18
	segcodeB[5] = 0b00110110;
  66:	26 e3       	ldi	r18, 0x36	; 54
  68:	20 93 7c 00 	sts	0x007C, r18
	segcodeB[6] = 0b00111110;
  6c:	2e e3       	ldi	r18, 0x3E	; 62
  6e:	20 93 7d 00 	sts	0x007D, r18
	segcodeB[7] = 0b00000011;
  72:	90 93 7e 00 	sts	0x007E, r25
	segcodeB[8] = 0b00111111;
  76:	2f e3       	ldi	r18, 0x3F	; 63
  78:	20 93 7f 00 	sts	0x007F, r18
	segcodeB[9] = 0b00110111;
  7c:	37 e3       	ldi	r19, 0x37	; 55
  7e:	30 93 80 00 	sts	0x0080, r19
	segcodeB[10] = 0b00011111;
  82:	80 93 81 00 	sts	0x0081, r24
			//  = a
	segcodeD[0] = 1;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	80 93 6c 00 	sts	0x006C, r24
	segcodeD[1] = 0;
  8c:	10 92 6d 00 	sts	0x006D, r1
	segcodeD[2] = 1;
  90:	80 93 6e 00 	sts	0x006E, r24
	segcodeD[3] = 1;
  94:	80 93 6f 00 	sts	0x006F, r24
	segcodeD[4] = 0;
  98:	10 92 70 00 	sts	0x0070, r1
	segcodeD[5] = 1;
  9c:	80 93 71 00 	sts	0x0071, r24
	segcodeD[6] = 1;
  a0:	80 93 72 00 	sts	0x0072, r24
	segcodeD[7] = 1;
  a4:	80 93 73 00 	sts	0x0073, r24
	segcodeD[8] = 1;
  a8:	80 93 74 00 	sts	0x0074, r24
	segcodeD[9] = 1;
  ac:	80 93 75 00 	sts	0x0075, r24
	segcodeD[10] = 1;
  b0:	80 93 76 00 	sts	0x0076, r24
	
	DDRD =(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7);
  b4:	88 ef       	ldi	r24, 0xF8	; 248
  b6:	81 bb       	out	0x11, r24	; 17
	DDRB =(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5);
  b8:	27 bb       	out	0x17, r18	; 23
	DDRC =(1<<PC4);
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	84 bb       	out	0x14, r24	; 20
	TCCR0 = 0b00000101; //Teiler 1024
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 256-90; //Interrupt jede 25ms;
  c2:	86 ea       	ldi	r24, 0xA6	; 166
  c4:	82 bf       	out	0x32, r24	; 50
	PORTD|=(1<<PD2);
  c6:	92 9a       	sbi	0x12, 2	; 18
	PORTC |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	8f 60       	ori	r24, 0x0F	; 15
  cc:	85 bb       	out	0x15, r24	; 21
	MCUCR=0b00000011;
  ce:	95 bf       	out	0x35, r25	; 53
	GICR=0b01000000;
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	8b bf       	out	0x3b, r24	; 59
	sei();
  d4:	78 94       	sei
		if (countdown)
		{
			
			darstellzahl[0] = Zeitwert/1000;
			darstellzahl[1] = Zeitwert/100-(darstellzahl[0]*10);
			darstellzahl[2] = Zeitwert/10-((darstellzahl[1]*10)+(darstellzahl[0]*100));
  d6:	0f 2e       	mov	r0, r31
  d8:	fc e9       	ldi	r31, 0x9C	; 156
  da:	cf 2e       	mov	r12, r31
  dc:	f0 2d       	mov	r31, r0
			darstellzahl[3] = Zeitwert-((darstellzahl[2]*10)+(darstellzahl[1]*100)+(darstellzahl[0]*1000));
  de:	0f 2e       	mov	r0, r31
  e0:	f8 e1       	ldi	r31, 0x18	; 24
  e2:	bf 2e       	mov	r11, r31
  e4:	f0 2d       	mov	r31, r0

    while(1)
    {
		if (triggermove)
		{
				darstellzahl[0]=darstellzahl[1];
  e6:	0f 2e       	mov	r0, r31
  e8:	f8 e6       	ldi	r31, 0x68	; 104
  ea:	4f 2e       	mov	r4, r31
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	5f 2e       	mov	r5, r31
  f0:	f0 2d       	mov	r31, r0
  f2:	0f 2e       	mov	r0, r31
  f4:	f7 e6       	ldi	r31, 0x67	; 103
  f6:	ef 2e       	mov	r14, r31
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ff 2e       	mov	r15, r31
  fc:	f0 2d       	mov	r31, r0
				darstellzahl[1]=darstellzahl[2];
  fe:	c9 e6       	ldi	r28, 0x69	; 105
 100:	d0 e0       	ldi	r29, 0x00	; 0
				darstellzahl[2]=darstellzahl[3];
 102:	0f 2e       	mov	r0, r31
 104:	fa e6       	ldi	r31, 0x6A	; 106
 106:	2f 2e       	mov	r2, r31
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	3f 2e       	mov	r3, r31
 10c:	f0 2d       	mov	r31, r0
				darstellzahl[3]=temp;
				triggermove=false;
 10e:	d1 2c       	mov	r13, r1
		if (triggermove)
		{
				darstellzahl[0]=darstellzahl[1];
				darstellzahl[1]=darstellzahl[2];
				darstellzahl[2]=darstellzahl[3];
				darstellzahl[3]=temp;
 110:	10 91 6b 00 	lds	r17, 0x006B
				triggermove=false;
		}
		if (countdown)
		{
			
			darstellzahl[0] = Zeitwert/1000;
 114:	40 91 65 00 	lds	r20, 0x0065
 118:	50 91 66 00 	lds	r21, 0x0066
 11c:	9a 01       	movw	r18, r20
 11e:	36 95       	lsr	r19
 120:	27 95       	ror	r18
 122:	36 95       	lsr	r19
 124:	27 95       	ror	r18
 126:	36 95       	lsr	r19
 128:	27 95       	ror	r18
 12a:	a5 ec       	ldi	r26, 0xC5	; 197
 12c:	b0 e2       	ldi	r27, 0x20	; 32
 12e:	71 d1       	rcall	.+738    	; 0x412 <__umulhisi3>
 130:	92 95       	swap	r25
 132:	82 95       	swap	r24
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	89 27       	eor	r24, r25
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 27       	eor	r24, r25
 13c:	98 2e       	mov	r9, r24
			darstellzahl[1] = Zeitwert/100-(darstellzahl[0]*10);
 13e:	88 0f       	add	r24, r24
 140:	88 2e       	mov	r8, r24
 142:	88 0c       	add	r8, r8
 144:	88 0c       	add	r8, r8
 146:	88 0e       	add	r8, r24
 148:	9a 01       	movw	r18, r20
 14a:	36 95       	lsr	r19
 14c:	27 95       	ror	r18
 14e:	36 95       	lsr	r19
 150:	27 95       	ror	r18
 152:	ab e7       	ldi	r26, 0x7B	; 123
 154:	b4 e1       	ldi	r27, 0x14	; 20
 156:	5d d1       	rcall	.+698    	; 0x412 <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	28 2f       	mov	r18, r24
 15e:	28 19       	sub	r18, r8
 160:	82 2e       	mov	r8, r18
			darstellzahl[2] = Zeitwert/10-((darstellzahl[1]*10)+(darstellzahl[0]*100));
 162:	82 2f       	mov	r24, r18
 164:	88 0f       	add	r24, r24
 166:	78 2e       	mov	r7, r24
 168:	77 0c       	add	r7, r7
 16a:	77 0c       	add	r7, r7
 16c:	78 0e       	add	r7, r24
 16e:	9a 01       	movw	r18, r20
 170:	ad ec       	ldi	r26, 0xCD	; 205
 172:	bc ec       	ldi	r27, 0xCC	; 204
 174:	4e d1       	rcall	.+668    	; 0x412 <__umulhisi3>
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	9c 9c       	mul	r9, r12
 184:	80 0d       	add	r24, r0
 186:	11 24       	eor	r1, r1
 188:	87 19       	sub	r24, r7
			darstellzahl[3] = Zeitwert-((darstellzahl[2]*10)+(darstellzahl[1]*100)+(darstellzahl[0]*1000));
 18a:	98 2f       	mov	r25, r24
 18c:	99 0f       	add	r25, r25
 18e:	79 2e       	mov	r7, r25
 190:	77 0c       	add	r7, r7
 192:	77 0c       	add	r7, r7
 194:	79 0e       	add	r7, r25
 196:	9b 9c       	mul	r9, r11
 198:	40 0d       	add	r20, r0
 19a:	11 24       	eor	r1, r1
 19c:	8c 9c       	mul	r8, r12
 19e:	40 0d       	add	r20, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	a0 91 64 00 	lds	r26, 0x0064
 1a6:	f2 01       	movw	r30, r4
 1a8:	30 81       	ld	r19, Z
 1aa:	f7 01       	movw	r30, r14
 1ac:	50 81       	ld	r21, Z
 1ae:	28 81       	ld	r18, Y
 1b0:	f1 01       	movw	r30, r2
 1b2:	90 81       	ld	r25, Z
 1b4:	70 91 62 00 	lds	r23, 0x0062
 1b8:	60 91 63 00 	lds	r22, 0x0063
		if (triggermove)
		{
				darstellzahl[0]=darstellzahl[1];
				darstellzahl[1]=darstellzahl[2];
				darstellzahl[2]=darstellzahl[3];
				darstellzahl[3]=temp;
 1bc:	b1 2f       	mov	r27, r17
		{
			
			darstellzahl[0] = Zeitwert/1000;
			darstellzahl[1] = Zeitwert/100-(darstellzahl[0]*10);
			darstellzahl[2] = Zeitwert/10-((darstellzahl[1]*10)+(darstellzahl[0]*100));
			darstellzahl[3] = Zeitwert-((darstellzahl[2]*10)+(darstellzahl[1]*100)+(darstellzahl[0]*1000));
 1be:	47 19       	sub	r20, r7
	GICR=0b01000000;
	sei();

    while(1)
    {
		if (triggermove)
 1c0:	aa 23       	and	r26, r26
 1c2:	29 f0       	breq	.+10     	; 0x1ce <main+0x186>
		{
				darstellzahl[0]=darstellzahl[1];
 1c4:	53 2f       	mov	r21, r19
				darstellzahl[1]=darstellzahl[2];
 1c6:	32 2f       	mov	r19, r18
				darstellzahl[2]=darstellzahl[3];
 1c8:	29 2f       	mov	r18, r25
				darstellzahl[3]=temp;
 1ca:	9b 2f       	mov	r25, r27
				triggermove=false;
 1cc:	ad 2d       	mov	r26, r13
		}
		if (countdown)
 1ce:	77 23       	and	r23, r23
 1d0:	29 f0       	breq	.+10     	; 0x1dc <main+0x194>
		{
			
			darstellzahl[0] = Zeitwert/1000;
			darstellzahl[1] = Zeitwert/100-(darstellzahl[0]*10);
			darstellzahl[2] = Zeitwert/10-((darstellzahl[1]*10)+(darstellzahl[0]*100));
			darstellzahl[3] = Zeitwert-((darstellzahl[2]*10)+(darstellzahl[1]*100)+(darstellzahl[0]*1000));
 1d2:	94 2f       	mov	r25, r20
		if (countdown)
		{
			
			darstellzahl[0] = Zeitwert/1000;
			darstellzahl[1] = Zeitwert/100-(darstellzahl[0]*10);
			darstellzahl[2] = Zeitwert/10-((darstellzahl[1]*10)+(darstellzahl[0]*100));
 1d4:	28 2f       	mov	r18, r24
				triggermove=false;
		}
		if (countdown)
		{
			
			darstellzahl[0] = Zeitwert/1000;
 1d6:	59 2d       	mov	r21, r9
			darstellzahl[1] = Zeitwert/100-(darstellzahl[0]*10);
 1d8:	38 2d       	mov	r19, r8
			darstellzahl[2] = Zeitwert/10-((darstellzahl[1]*10)+(darstellzahl[0]*100));
			darstellzahl[3] = Zeitwert-((darstellzahl[2]*10)+(darstellzahl[1]*100)+(darstellzahl[0]*1000));
			countdown=false;
 1da:	7d 2d       	mov	r23, r13
		}
		if (reset)
 1dc:	66 23       	and	r22, r22
 1de:	29 f0       	breq	.+10     	; 0x1ea <main+0x1a2>
			
			darstellzahl[0]=0;
			darstellzahl[1]=0;
			darstellzahl[2]=0;
			darstellzahl[3]=0;
			reset = false;
 1e0:	6d 2d       	mov	r22, r13
		{
			
			darstellzahl[0]=0;
			darstellzahl[1]=0;
			darstellzahl[2]=0;
			darstellzahl[3]=0;
 1e2:	9d 2d       	mov	r25, r13
		if (reset)
		{
			
			darstellzahl[0]=0;
			darstellzahl[1]=0;
			darstellzahl[2]=0;
 1e4:	2d 2d       	mov	r18, r13
			countdown=false;
		}
		if (reset)
		{
			
			darstellzahl[0]=0;
 1e6:	5d 2d       	mov	r21, r13
			darstellzahl[1]=0;
 1e8:	3d 2d       	mov	r19, r13
			darstellzahl[2]=0;
			darstellzahl[3]=0;
			reset = false;
		}
		if (temp<11)
 1ea:	1b 30       	cpi	r17, 0x0B	; 11
 1ec:	48 f7       	brcc	.-46     	; 0x1c0 <main+0x178>
 1ee:	a0 93 64 00 	sts	0x0064, r26
 1f2:	f2 01       	movw	r30, r4
 1f4:	30 83       	st	Z, r19
 1f6:	f7 01       	movw	r30, r14
 1f8:	50 83       	st	Z, r21
 1fa:	28 83       	st	Y, r18
 1fc:	f1 01       	movw	r30, r2
 1fe:	90 83       	st	Z, r25
 200:	70 93 62 00 	sts	0x0062, r23
 204:	60 93 63 00 	sts	0x0063, r22
		{
		PORTD=(1<<PD2)|(1<<PD3)|(0<<PD4)|(0<<PD5)|(0<<PD6)|(segcodeD[darstellzahl[0]]<<PD7);
 208:	85 2f       	mov	r24, r21
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	dc 01       	movw	r26, r24
 20e:	a4 59       	subi	r26, 0x94	; 148
 210:	bf 4f       	sbci	r27, 0xFF	; 255
 212:	2c 91       	ld	r18, X
 214:	f0 e8       	ldi	r31, 0x80	; 128
 216:	2f 9f       	mul	r18, r31
 218:	90 01       	movw	r18, r0
 21a:	11 24       	eor	r1, r1
 21c:	2c 60       	ori	r18, 0x0C	; 12
 21e:	22 bb       	out	0x12, r18	; 18
		PORTB=segcodeB[darstellzahl[0]];
 220:	dc 01       	movw	r26, r24
 222:	a9 58       	subi	r26, 0x89	; 137
 224:	bf 4f       	sbci	r27, 0xFF	; 255
 226:	8c 91       	ld	r24, X
 228:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	83 e3       	ldi	r24, 0x33	; 51
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x1e6>
		_delay_ms(2);
		PORTD=(1<<PD2)|(0<<PD3)|(1<<PD4)|(0<<PD5)|(0<<PD6)|(segcodeD[darstellzahl[1]]<<PD7);
 232:	f2 01       	movw	r30, r4
 234:	80 81       	ld	r24, Z
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	dc 01       	movw	r26, r24
 23a:	a4 59       	subi	r26, 0x94	; 148
 23c:	bf 4f       	sbci	r27, 0xFF	; 255
 23e:	2c 91       	ld	r18, X
 240:	f0 e8       	ldi	r31, 0x80	; 128
 242:	2f 9f       	mul	r18, r31
 244:	90 01       	movw	r18, r0
 246:	11 24       	eor	r1, r1
 248:	24 61       	ori	r18, 0x14	; 20
 24a:	22 bb       	out	0x12, r18	; 18
		PORTB=segcodeB[darstellzahl[1]];
 24c:	dc 01       	movw	r26, r24
 24e:	a9 58       	subi	r26, 0x89	; 137
 250:	bf 4f       	sbci	r27, 0xFF	; 255
 252:	8c 91       	ld	r24, X
 254:	88 bb       	out	0x18, r24	; 24
 256:	83 e3       	ldi	r24, 0x33	; 51
 258:	97 e0       	ldi	r25, 0x07	; 7
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x212>
		_delay_ms(2);
		PORTD=(1<<PD2)|(0<<PD3)|(0<<PD4)|(1<<PD5)|(0<<PD6)|(segcodeD[darstellzahl[2]]<<PD7);
 25e:	88 81       	ld	r24, Y
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	dc 01       	movw	r26, r24
 264:	a4 59       	subi	r26, 0x94	; 148
 266:	bf 4f       	sbci	r27, 0xFF	; 255
 268:	2c 91       	ld	r18, X
 26a:	e0 e8       	ldi	r30, 0x80	; 128
 26c:	2e 9f       	mul	r18, r30
 26e:	90 01       	movw	r18, r0
 270:	11 24       	eor	r1, r1
 272:	24 62       	ori	r18, 0x24	; 36
 274:	22 bb       	out	0x12, r18	; 18
		PORTB=segcodeB[darstellzahl[2]];
 276:	dc 01       	movw	r26, r24
 278:	a9 58       	subi	r26, 0x89	; 137
 27a:	bf 4f       	sbci	r27, 0xFF	; 255
 27c:	8c 91       	ld	r24, X
 27e:	88 bb       	out	0x18, r24	; 24
 280:	83 e3       	ldi	r24, 0x33	; 51
 282:	97 e0       	ldi	r25, 0x07	; 7
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x23c>
		_delay_ms(2);
		PORTD=(1<<PD2)|(0<<PD3)|(0<<PD4)|(0<<PD5)|(1<<PD6)|(segcodeD[darstellzahl[3]]<<PD7);
 288:	f1 01       	movw	r30, r2
 28a:	80 81       	ld	r24, Z
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	dc 01       	movw	r26, r24
 290:	a4 59       	subi	r26, 0x94	; 148
 292:	bf 4f       	sbci	r27, 0xFF	; 255
 294:	2c 91       	ld	r18, X
 296:	f0 e8       	ldi	r31, 0x80	; 128
 298:	2f 9f       	mul	r18, r31
 29a:	90 01       	movw	r18, r0
 29c:	11 24       	eor	r1, r1
 29e:	24 64       	ori	r18, 0x44	; 68
 2a0:	22 bb       	out	0x12, r18	; 18
		PORTB=segcodeB[darstellzahl[3]];
 2a2:	dc 01       	movw	r26, r24
 2a4:	a9 58       	subi	r26, 0x89	; 137
 2a6:	bf 4f       	sbci	r27, 0xFF	; 255
 2a8:	8c 91       	ld	r24, X
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	83 e3       	ldi	r24, 0x33	; 51
 2ae:	97 e0       	ldi	r25, 0x07	; 7
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x268>
 2b4:	2d cf       	rjmp	.-422    	; 0x110 <main+0xc8>

000002b6 <__vector_1>:
		}
    }

}
ISR(INT0_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	temp = PINC & 0x0F;
 2d0:	83 b3       	in	r24, 0x13	; 19
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	80 93 6b 00 	sts	0x006B, r24
	if (noinput==false)
 2d8:	90 91 61 00 	lds	r25, 0x0061
 2dc:	91 11       	cpse	r25, r1
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <__vector_1+0x3c>
	{
	if (temp<11)
 2e0:	8b 30       	cpi	r24, 0x0B	; 11
 2e2:	20 f4       	brcc	.+8      	; 0x2ec <__vector_1+0x36>
	{
	triggermove = true;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 64 00 	sts	0x0064, r24
 2ea:	5a c0       	rjmp	.+180    	; 0x3a0 <__vector_1+0xea>
	}
	else
	{
		triggermove=false;
 2ec:	10 92 64 00 	sts	0x0064, r1
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <__vector_1+0x42>
	}
	}
	if (temp>10)//wenn keine ziffer
 2f2:	8b 30       	cpi	r24, 0x0B	; 11
 2f4:	08 f4       	brcc	.+2      	; 0x2f8 <__vector_1+0x42>
 2f6:	54 c0       	rjmp	.+168    	; 0x3a0 <__vector_1+0xea>
	{
		if (temp==11)
 2f8:	8b 30       	cpi	r24, 0x0B	; 11
 2fa:	41 f4       	brne	.+16     	; 0x30c <__vector_1+0x56>
		{
			reset = true;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 63 00 	sts	0x0063, r24
			TIMSK=(0<<TOIE0);
 302:	19 be       	out	0x39, r1	; 57
			TCNT0 = 256-90;
 304:	86 ea       	ldi	r24, 0xA6	; 166
 306:	82 bf       	out	0x32, r24	; 50
			noinput = false;
 308:	10 92 61 00 	sts	0x0061, r1
		}
		if (temp == 12)// wenn #
 30c:	80 91 6b 00 	lds	r24, 0x006B
 310:	8c 30       	cpi	r24, 0x0C	; 12
 312:	09 f0       	breq	.+2      	; 0x316 <__vector_1+0x60>
 314:	40 c0       	rjmp	.+128    	; 0x396 <__vector_1+0xe0>
		{		
			noinput=true;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 61 00 	sts	0x0061, r24
 31c:	e7 e6       	ldi	r30, 0x67	; 103
 31e:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_ms(2);
		}
    }

}
ISR(INT0_vect)
 320:	8b e6       	ldi	r24, 0x6B	; 107
 322:	90 e0       	ldi	r25, 0x00	; 0
		{		
			noinput=true;
				for (int n = 0; n < 4; n++)
				{
					//Da DTMF 0 als 10 ausgegeben wird
					if (darstellzahl[n]==10)
 324:	20 81       	ld	r18, Z
 326:	2a 30       	cpi	r18, 0x0A	; 10
 328:	09 f4       	brne	.+2      	; 0x32c <__vector_1+0x76>
					{
						darstellzahl[n] = 0;
 32a:	10 82       	st	Z, r1
 32c:	31 96       	adiw	r30, 0x01	; 1
			noinput = false;
		}
		if (temp == 12)// wenn #
		{		
			noinput=true;
				for (int n = 0; n < 4; n++)
 32e:	e8 17       	cp	r30, r24
 330:	f9 07       	cpc	r31, r25
 332:	c1 f7       	brne	.-16     	; 0x324 <__vector_1+0x6e>
					if (darstellzahl[n]==10)
					{
						darstellzahl[n] = 0;
					}
				}
		Zeitwert = darstellzahl[0]*1000+darstellzahl[1]*100+darstellzahl[2]*10+darstellzahl[3];	
 334:	20 91 67 00 	lds	r18, 0x0067
 338:	88 ee       	ldi	r24, 0xE8	; 232
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	28 9f       	mul	r18, r24
 33e:	a0 01       	movw	r20, r0
 340:	29 9f       	mul	r18, r25
 342:	50 0d       	add	r21, r0
 344:	11 24       	eor	r1, r1
 346:	80 91 68 00 	lds	r24, 0x0068
 34a:	94 e6       	ldi	r25, 0x64	; 100
 34c:	89 9f       	mul	r24, r25
 34e:	40 0d       	add	r20, r0
 350:	51 1d       	adc	r21, r1
 352:	11 24       	eor	r1, r1
 354:	80 91 69 00 	lds	r24, 0x0069
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	9c 01       	movw	r18, r24
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	c9 01       	movw	r24, r18
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	28 0f       	add	r18, r24
 36c:	39 1f       	adc	r19, r25
 36e:	ca 01       	movw	r24, r20
 370:	82 0f       	add	r24, r18
 372:	93 1f       	adc	r25, r19
 374:	20 91 6a 00 	lds	r18, 0x006A
 378:	82 0f       	add	r24, r18
 37a:	91 1d       	adc	r25, r1
 37c:	90 93 66 00 	sts	0x0066, r25
 380:	80 93 65 00 	sts	0x0065, r24
		if (Zeitwert>0)
 384:	89 2b       	or	r24, r25
 386:	29 f0       	breq	.+10     	; 0x392 <__vector_1+0xdc>
		{
			TIMSK|=(1<<TOIE0);
 388:	89 b7       	in	r24, 0x39	; 57
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	89 bf       	out	0x39, r24	; 57
			PORTC |=(1<<PC4);
 38e:	ac 9a       	sbi	0x15, 4	; 21
 390:	02 c0       	rjmp	.+4      	; 0x396 <__vector_1+0xe0>
		}
		else
		{
			noinput=false;
 392:	10 92 61 00 	sts	0x0061, r1
		}
		}
		temp=10;
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	80 93 6b 00 	sts	0x006B, r24
		triggermove=false;
 39c:	10 92 64 00 	sts	0x0064, r1
	}
//	_delay_ms(10);
}
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <__vector_9>:
ISR(TIMER0_OVF_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
	tzaehler++;
 3c8:	80 91 60 00 	lds	r24, 0x0060
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 60 00 	sts	0x0060, r24
	if (tzaehler == 40) //wenn 1sek
 3d2:	88 32       	cpi	r24, 0x28	; 40
 3d4:	a9 f4       	brne	.+42     	; 0x400 <__vector_9+0x46>
	{
		Zeitwert = Zeitwert-1;
 3d6:	80 91 65 00 	lds	r24, 0x0065
 3da:	90 91 66 00 	lds	r25, 0x0066
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	90 93 66 00 	sts	0x0066, r25
 3e4:	80 93 65 00 	sts	0x0065, r24
		if (Zeitwert<=0)
 3e8:	89 2b       	or	r24, r25
 3ea:	29 f4       	brne	.+10     	; 0x3f6 <__vector_9+0x3c>
		{
			TIMSK=(0<<TOIE0);
 3ec:	19 be       	out	0x39, r1	; 57
			noinput=false;
 3ee:	10 92 61 00 	sts	0x0061, r1
			PORTC = 0b00001111;
 3f2:	8f e0       	ldi	r24, 0x0F	; 15
 3f4:	85 bb       	out	0x15, r24	; 21
		}
		countdown = true;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 62 00 	sts	0x0062, r24
		tzaehler = 0;
 3fc:	10 92 60 00 	sts	0x0060, r1
	}
	TCNT0 = 256-90;
 400:	86 ea       	ldi	r24, 0xA6	; 166
 402:	82 bf       	out	0x32, r24	; 50
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__umulhisi3>:
 412:	a2 9f       	mul	r26, r18
 414:	b0 01       	movw	r22, r0
 416:	b3 9f       	mul	r27, r19
 418:	c0 01       	movw	r24, r0
 41a:	a3 9f       	mul	r26, r19
 41c:	01 d0       	rcall	.+2      	; 0x420 <__umulhisi3+0xe>
 41e:	b2 9f       	mul	r27, r18
 420:	70 0d       	add	r23, r0
 422:	81 1d       	adc	r24, r1
 424:	11 24       	eor	r1, r1
 426:	91 1d       	adc	r25, r1
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
